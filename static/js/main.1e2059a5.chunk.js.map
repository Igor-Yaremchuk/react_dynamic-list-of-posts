{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","types/Error.ts","components/NewCommentForm.tsx","api/users.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","userPosts","handleSelectedPost","selectedPost","handleToggleSidebar","isOpenSidebar","className","map","id","title","isSelected","type","classNames","onClick","handlePostButtonClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","Error","client","NewCommentForm","postComments","setPostComments","setError","useState","name","setName","email","setEmail","comment","setComment","newId","setNewId","loading","setLoading","errorForm","setErrorForm","useEffect","allComments","maxId","Math","max","handleRemoveErrorForm","field","onSubmit","event","preventDefault","newComment","postId","addComment","catch","Add","finally","htmlFor","placeholder","value","onChange","e","target","None","PostDetails","handleDeleteComment","isLoadingComments","error","openCommentForm","setOpenCommentForm","length","href","UserSelector","users","selectedUserId","handleSelectedUser","openMenu","setOpenMenu","menuRef","useRef","selectedUserName","find","handleClick","current","contains","document","addEventListener","removeEventListener","handleToggleMenu","ref","role","App","setUsers","setSelectedUserId","setUserPosts","isLoadingPost","setIsLoadingPost","setSelectedPost","setIsLoadingComments","setIsOpenSidebar","usersFromData","posts","UserPosts","comments","userId","newSelectedPost","status","commentId","newCommentList","filter","Delete","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1e2059a5.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  userPosts: Post[],\n  handleSelectedPost: (postId: number) => void,\n  selectedPost: Post | null,\n  handleToggleSidebar: (status?: boolean) => void,\n  isOpenSidebar: boolean,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  userPosts,\n  handleSelectedPost,\n  selectedPost,\n  handleToggleSidebar,\n  isOpenSidebar,\n}) => {\n  const handlePostButtonClick = (id: number) => {\n    if (selectedPost?.id === id) {\n      handleToggleSidebar();\n    } else {\n      handleSelectedPost(id);\n      handleToggleSidebar(true);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {userPosts.map(({ id, title }) => {\n            const isSelected = selectedPost?.id === id;\n\n            return (\n              <tr data-cy=\"Post\" key={id}>\n                <td data-cy=\"PostId\">\n                  {id}\n                </td>\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames(\n                      'button is-link',\n                      {\n                        'is-light': !isSelected,\n                      },\n                    )}\n                    onClick={() => handlePostButtonClick(id)}\n                  >\n                    {isOpenSidebar && isSelected ? 'Close' : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum Error {\n  None = '',\n  UserPosts = 'Unable to get a user posts',\n  Delete = 'Unable to delete comment',\n  Add = 'Unable to add new comment',\n}\n\nexport interface ErrorForm {\n  name: boolean,\n  email: boolean,\n  comment: boolean,\n}\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { addComment, getAllComment } from '../api/users';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { Error, ErrorForm } from '../types/Error';\n\ntype Props = {\n  selectedPost: Post,\n  postComments: Comment[],\n  setPostComments: React.Dispatch<React.SetStateAction<Comment[]>>\n  setError: React.Dispatch<React.SetStateAction<Error>>,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPost,\n  postComments,\n  setPostComments,\n  setError,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n  const [newId, setNewId] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [errorForm, setErrorForm] = useState<ErrorForm>({\n    name: false,\n    email: false,\n    comment: false,\n  });\n\n  useEffect(() => {\n    getAllComment().then(allComments => {\n      const maxId = Math.max(...allComments.map(({ id }) => id)) + 1;\n\n      setNewId(maxId);\n    });\n  }, [postComments]);\n\n  const handleClearForm = () => {\n    setName('');\n    setEmail('');\n    setComment('');\n    setError(Error.None);\n    setErrorForm({\n      name: false,\n      email: false,\n      comment: false,\n    });\n  };\n\n  const handleAddComment = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setErrorForm({\n      name: !name,\n      email: !email,\n      comment: !comment,\n    });\n\n    if (!name || !email || !comment) {\n      return;\n    }\n\n    setLoading(true);\n\n    const newComment = {\n      id: newId,\n      postId: selectedPost.id,\n      body: comment,\n      name,\n      email,\n    };\n\n    addComment(selectedPost.id, newComment)\n      .then(() => {\n        setPostComments([...postComments, newComment]);\n      })\n      .catch(() => setError(Error.Add))\n      .finally(() => {\n        setComment('');\n        setLoading(false);\n      });\n  };\n\n  const handleRemoveErrorForm = (field: string) => {\n    setErrorForm({ ...errorForm, [field]: false });\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleAddComment}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              {\n                'is-danger': errorForm.name,\n              },\n            )}\n            value={name}\n            onChange={(e) => {\n              setName(e.target.value);\n              handleRemoveErrorForm('name');\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errorForm.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errorForm.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              {\n                'is-danger': errorForm.email,\n              },\n            )}\n            value={email}\n            onChange={(e) => {\n              setEmail(e.target.value);\n              handleRemoveErrorForm('email');\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errorForm.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errorForm.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              {\n                'is-danger': errorForm.comment,\n              },\n            )}\n            value={comment}\n            onChange={(e) => {\n              setComment(e.target.value);\n              handleRemoveErrorForm('comment');\n            }}\n          />\n        </div>\n\n        {errorForm.comment && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              {\n                'is-loading': loading,\n              },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClearForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { User } from '../types/User';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getUserPosts = (id: number) => {\n  return client.get<Post[]>(`/posts?userId=${id}`);\n};\n\nexport const getPostComments = (id: number) => {\n  return client.get<Comment[]>(`/comments?postId=${id}`);\n};\n\nexport const getAllComment = () => {\n  return client.get<Comment[]>('/comments');\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n\nexport const addComment = (id: number, comment: Comment) => {\n  return client.post(`/comments?postId=${id}`, comment);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { Error } from '../types/Error';\n\ntype Props = {\n  postComments: Comment[],\n  selectedPost: Post,\n  handleDeleteComment: (commntId: number) => void,\n  setPostComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  isLoadingComments: boolean,\n  error: Error,\n  setError: React.Dispatch<React.SetStateAction<Error>>,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  postComments,\n  selectedPost,\n  handleDeleteComment,\n  setPostComments,\n  isLoadingComments,\n  error,\n  setError,\n}) => {\n  const [openCommentForm, setOpenCommentForm] = useState(false);\n\n  useEffect(() => {\n    setOpenCommentForm(false);\n  }, [selectedPost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoadingComments && (\n            <Loader />\n          )}\n\n          {error !== Error.None && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {error}\n            </div>\n          )}\n\n          {(!postComments.length && !isLoadingComments) && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {postComments.map(comment => {\n            const {\n              name,\n              body,\n              email,\n              id,\n            } = comment;\n\n            return (\n              <article\n                className=\"message is-small\"\n                data-cy=\"Comment\"\n                key={id}\n              >\n                <div className=\"message-header\">\n                  <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                    {name}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => handleDeleteComment(id)}\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {body}\n                </div>\n              </article>\n            );\n          })}\n\n          {(!openCommentForm && !isLoadingComments) && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setOpenCommentForm(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {openCommentForm && (\n          <NewCommentForm\n            selectedPost={selectedPost}\n            postComments={postComments}\n            setPostComments={setPostComments}\n            setError={setError}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  selectedUserId: number | null,\n  handleSelectedUser: (userId: number) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUserId,\n  handleSelectedUser,\n}) => {\n  const [openMenu, setOpenMenu] = useState(false);\n  const menuRef = useRef<HTMLDivElement>(null);\n  const selectedUserName = users.find(({ id }) => id === selectedUserId)?.name;\n\n  useEffect(() => {\n    const handleClick = (e: MouseEvent) => {\n      if (menuRef.current && !menuRef.current.contains(e.target as Node)) {\n        setOpenMenu(false);\n      }\n    };\n\n    document.addEventListener('click', handleClick);\n\n    return () => {\n      document.removeEventListener('click', handleClick);\n    };\n  }, []);\n\n  const handleToggleMenu = () => {\n    setOpenMenu(!openMenu);\n  };\n\n  return (\n    <div\n      ref={menuRef}\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        {\n          'is-active': openMenu,\n        },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleToggleMenu}\n        >\n          <span>\n            {!selectedUserId\n              ? 'Choose a user'\n              : selectedUserName}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(({ id, name }) => (\n            <a\n              key={id}\n              href={`#user-${id}`}\n              className={classNames(\n                'dropdown-item',\n                {\n                  'is-active': selectedUserId === id,\n                },\n              )}\n              onClick={() => {\n                handleSelectedUser(id);\n                handleToggleMenu();\n              }}\n            >\n              {name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Error } from './types/Error';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\nimport {\n  deleteComment,\n  getPostComments,\n  getUserPosts,\n  getUsers,\n} from './api/users';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [isLoadingPost, setIsLoadingPost] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n  const [isOpenSidebar, setIsOpenSidebar] = useState(false);\n  const [error, setError] = useState<Error>(Error.None);\n\n  useEffect(() => {\n    getUsers()\n      .then(usersFromData => setUsers(usersFromData));\n  }, []);\n\n  useEffect(() => {\n    setIsLoadingPost(true);\n\n    if (selectedUserId) {\n      setError(Error.None);\n\n      getUserPosts(selectedUserId)\n        .then(posts => setUserPosts(posts))\n        .catch(() => setError(Error.UserPosts))\n        .finally(() => setIsLoadingPost(false));\n    }\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    if (selectedPost) {\n      setIsLoadingComments(true);\n\n      getPostComments(selectedPost.id)\n        .then(comments => setPostComments(comments))\n        .finally(() => setIsLoadingComments(false));\n    }\n  }, [selectedPost]);\n\n  const handleSelectedUser = (userId: number) => {\n    setSelectedUserId(userId);\n    setIsOpenSidebar(false);\n    setError(Error.None);\n\n    setSelectedPost(null);\n  };\n\n  const handleSelectedPost = (postId: number) => {\n    const newSelectedPost = userPosts.find(({ id }) => id === postId);\n\n    if (newSelectedPost) {\n      setSelectedPost(newSelectedPost);\n    }\n\n    setError(Error.None);\n  };\n\n  const handleDeleteComment = (commentId: number) => {\n    setError(Error.None);\n\n    deleteComment(commentId)\n      .then(() => {\n        const newCommentList = postComments\n          .filter(({ id }) => id !== commentId);\n\n        setPostComments(newCommentList);\n      })\n      .catch(() => setError(Error.Delete));\n  };\n\n  const handleToggleSidebar = (status?: boolean) => {\n    if (status) {\n      setIsOpenSidebar(status);\n    } else {\n      setIsOpenSidebar(!isOpenSidebar);\n    }\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUserId={selectedUserId}\n                  handleSelectedUser={handleSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUserId && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {(isLoadingPost && selectedUserId) && (\n                  <Loader />\n                )}\n\n                {error === Error.UserPosts && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {error}\n                  </div>\n                )}\n\n                {(!isLoadingPost && !userPosts.length && !error) && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {(!!userPosts.length && !isLoadingPost) && (\n                  <PostsList\n                    userPosts={userPosts}\n                    handleSelectedPost={handleSelectedPost}\n                    selectedPost={selectedPost}\n                    handleToggleSidebar={handleToggleSidebar}\n                    isOpenSidebar={isOpenSidebar}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': isOpenSidebar,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  postComments={postComments}\n                  selectedPost={selectedPost}\n                  handleDeleteComment={handleDeleteComment}\n                  setPostComments={setPostComments}\n                  isLoadingComments={isLoadingComments}\n                  error={error}\n                  setError={setError}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}